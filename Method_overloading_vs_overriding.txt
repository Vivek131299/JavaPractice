Method Overloading vs Method Overriding :


Method Overloading :

Method overloading means providing two or more separate methods in a class with the 
same name but different parameters.
Method return type may or may not be different and that allows us to reuse the same method name.

Overloading does not have anything to do with polymorphism but Java developers often refer 
to overloading as Compile Time Polymorphism.
In other words the compiler decided which method is going to be called based on the method name,
return type and argument list.
We can overload static and instance methods.

Usually overloading happens inside a single class, but a method can also be treated as overloaded 
in the subclass of that class.
That is because a subclass inherits one version of the method from the parent class and then 
the subclass can have another overloaded version of ther methods.

Method Overloading Rules:
Methods must have the same method name.
Methods must have different parameters.

If methods follow the rules above then they may or may not - 
Have different return types.
Have different access modifiers.
Throw different checked or unchecked exceptions.


Method Overriding :

Method overriding means defining a method in a child class that already exixts in the parent 
class with same signature(same name, same arguments) class.
Method overriding is also known as Runtime Polymorphism and Dynamic Method Dispatch, 
because the method that is going to be called is decided at runtime by the JVM.

When we override a method it's recommended to put @Override immediately above the 
method definition. This is an annotation that the compiler reads and will then show us an 
error if we don't follow overriding rules correctly.

We can't override static methods only instance methods can be overriden.

Method Overriding Rules :
It must have same name and same arguments.
Return type can be a subclass of the return type in the parent class.
It can't have a lower access modifiers.
For example if the parent method is protected then using private in the child is not allowed 
but using public in the child would be allowed.

Important points about method overriding:
Only inherited methods canbe averriden, means methods can be overriden only in child classes.
Constructors and private methods cannot be overriden.
Methods that are final cannnot be overriden.
A subclass can use super.methodsName() to call the superclass version of an overriden method.